// <auto-generated />
using catinc.Models.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace catinc.Migrations
{
    [DbContext(typeof(MySqlDbContext))]
    partial class MySqlDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("catinc.Models.Domain.Creditcard", b =>
                {
                    b.Property<int>("CreditcardID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CCV");

                    b.Property<int>("CreditcardNo");

                    b.Property<DateTime>("ExpirationDate");

                    b.HasKey("CreditcardID");

                    b.ToTable("Creditcards");
                });

            modelBuilder.Entity("catinc.Models.Domain.Discount", b =>
                {
                    b.Property<int>("DiscountID")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DiscountEnd");

                    b.Property<DateTime>("DiscountStart");

                    b.Property<bool>("IsDiscountDeleted");

                    b.HasKey("DiscountID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("catinc.Models.Domain.Log", b =>
                {
                    b.Property<int>("LogID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LogLevel");

                    b.Property<string>("LogMessage");

                    b.Property<DateTime>("LogTimestamp");

                    b.HasKey("LogID");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("catinc.Models.Domain.Loyalty", b =>
                {
                    b.Property<int>("LoyaltyID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("LoyaltyPoints");

                    b.HasKey("LoyaltyID");

                    b.ToTable("Loyaltys");
                });

            modelBuilder.Entity("catinc.Models.Domain.MyIdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<int?>("LogID");

                    b.Property<int?>("LoyaltyID");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("PermissionID");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("LogID")
                        .IsUnique();

                    b.HasIndex("LoyaltyID")
                        .IsUnique();

                    b.HasIndex("PermissionID")
                        .IsUnique();

                    b.ToTable("MyIdentityUser");
                });

            modelBuilder.Entity("catinc.Models.Domain.Orders", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DiscountID");

                    b.Property<DateTime>("OrderTimestamp");

                    b.Property<string>("UserId");

                    b.HasKey("OrderID");

                    b.HasIndex("DiscountID")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("catinc.Models.Domain.Patron", b =>
                {
                    b.Property<int>("PatronID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsPatronDeleted");

                    b.Property<bool>("IsPatronSuspended");

                    b.Property<string>("PatronAddress");

                    b.Property<string>("PatronEmail");

                    b.Property<string>("PatronFirst");

                    b.Property<string>("PatronLast");

                    b.Property<string>("PatronTelephoneNo");

                    b.Property<string>("UserId");

                    b.HasKey("PatronID");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Patrons");
                });

            modelBuilder.Entity("catinc.Models.Domain.PatronCreditcard", b =>
                {
                    b.Property<int>("PatronCreditcardID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CreditcardID");

                    b.Property<int?>("PatronID");

                    b.HasKey("PatronCreditcardID");

                    b.HasIndex("CreditcardID");

                    b.HasIndex("PatronID");

                    b.ToTable("PatronCreditcards");
                });

            modelBuilder.Entity("catinc.Models.Domain.Permission", b =>
                {
                    b.Property<int>("PermissionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PermissionLevel");

                    b.HasKey("PermissionID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("catinc.Models.Domain.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsProductedDeleted");

                    b.Property<DateTime>("ProductExpirationDate");

                    b.Property<string>("ProductImageURL");

                    b.Property<int>("ProductInventory");

                    b.Property<string>("ProductLongDescription");

                    b.Property<string>("ProductName");

                    b.Property<decimal>("ProductPrice");

                    b.Property<string>("ProductSKU");

                    b.Property<string>("ProductShortDescription");

                    b.Property<int?>("VendorId");

                    b.HasKey("ProductID");

                    b.HasIndex("VendorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("catinc.Models.Domain.ProductOrder", b =>
                {
                    b.Property<int>("ProductOrderID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("OrderID");

                    b.Property<int?>("OrderID1");

                    b.Property<int?>("ProductID");

                    b.Property<int?>("ProductID1");

                    b.Property<int>("Quantity");

                    b.HasKey("ProductOrderID");

                    b.HasIndex("OrderID");

                    b.HasIndex("OrderID1");

                    b.HasIndex("ProductID");

                    b.HasIndex("ProductID1");

                    b.ToTable("ProductOrders");
                });

            modelBuilder.Entity("catinc.Models.Domain.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsVendorActive");

                    b.Property<bool>("IsVendorDeleted");

                    b.Property<bool>("IsVendorSuspended");

                    b.Property<string>("VendorAddress");

                    b.Property<int>("VendorCreditcardNo");

                    b.Property<string>("VendorEmail");

                    b.Property<string>("VendorName");

                    b.Property<decimal>("VendorPaymentAmount");

                    b.Property<string>("VendorTelephoneNo");

                    b.HasKey("VendorId");

                    b.ToTable("Vendors");
                });

            modelBuilder.Entity("catinc.Models.Domain.VendorUser", b =>
                {
                    b.Property<int>("VendorUserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("UserId");

                    b.Property<int?>("VendorId");

                    b.Property<int?>("VendorUserPermissionID");

                    b.HasKey("VendorUserId");

                    b.HasIndex("UserId");

                    b.HasIndex("VendorId");

                    b.HasIndex("VendorUserPermissionID")
                        .IsUnique();

                    b.ToTable("VendorUsers");
                });

            modelBuilder.Entity("catinc.Models.Domain.VendorUserPermission", b =>
                {
                    b.Property<int>("VendorUserPermissionID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("PermissionLevel");

                    b.HasKey("VendorUserPermissionID");

                    b.ToTable("VendorUserPermission");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedName");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ProviderKey");

                    b.HasKey("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RoleId");

                    b.HasKey("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("catinc.Models.Domain.MyIdentityUser", b =>
                {
                    b.HasOne("catinc.Models.Domain.Log", "Log")
                        .WithOne("User")
                        .HasForeignKey("catinc.Models.Domain.MyIdentityUser", "LogID");

                    b.HasOne("catinc.Models.Domain.Loyalty", "Loyalty")
                        .WithOne("User")
                        .HasForeignKey("catinc.Models.Domain.MyIdentityUser", "LoyaltyID");

                    b.HasOne("catinc.Models.Domain.Permission", "Permission")
                        .WithOne("User")
                        .HasForeignKey("catinc.Models.Domain.MyIdentityUser", "PermissionID");
                });

            modelBuilder.Entity("catinc.Models.Domain.Orders", b =>
                {
                    b.HasOne("catinc.Models.Domain.Discount", "Discount")
                        .WithOne("Order")
                        .HasForeignKey("catinc.Models.Domain.Orders", "DiscountID");

                    b.HasOne("catinc.Models.Domain.MyIdentityUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("catinc.Models.Domain.Patron", b =>
                {
                    b.HasOne("catinc.Models.Domain.MyIdentityUser", "User")
                        .WithOne("Patron")
                        .HasForeignKey("catinc.Models.Domain.Patron", "UserId");
                });

            modelBuilder.Entity("catinc.Models.Domain.PatronCreditcard", b =>
                {
                    b.HasOne("catinc.Models.Domain.Creditcard", "Creditcard")
                        .WithMany("PatronCreditcards")
                        .HasForeignKey("CreditcardID");

                    b.HasOne("catinc.Models.Domain.Patron", "Patron")
                        .WithMany("PatronCreditcards")
                        .HasForeignKey("PatronID");
                });

            modelBuilder.Entity("catinc.Models.Domain.Product", b =>
                {
                    b.HasOne("catinc.Models.Domain.Vendor", "Vendor")
                        .WithMany()
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("catinc.Models.Domain.ProductOrder", b =>
                {
                    b.HasOne("catinc.Models.Domain.Orders", "Order")
                        .WithMany("ProductOrders")
                        .HasForeignKey("OrderID");

                    b.HasOne("catinc.Models.Domain.Orders", "order")
                        .WithMany()
                        .HasForeignKey("OrderID1");

                    b.HasOne("catinc.Models.Domain.Product", "Product")
                        .WithMany("ProductOrders")
                        .HasForeignKey("ProductID");

                    b.HasOne("catinc.Models.Domain.Product", "product")
                        .WithMany()
                        .HasForeignKey("ProductID1");
                });

            modelBuilder.Entity("catinc.Models.Domain.VendorUser", b =>
                {
                    b.HasOne("catinc.Models.Domain.MyIdentityUser", "User")
                        .WithMany("VendorUsers")
                        .HasForeignKey("UserId");

                    b.HasOne("catinc.Models.Domain.Vendor", "Vendor")
                        .WithMany("VendorUsers")
                        .HasForeignKey("VendorId");

                    b.HasOne("catinc.Models.Domain.VendorUserPermission", "VendorUserPermission")
                        .WithOne("VendorUser")
                        .HasForeignKey("catinc.Models.Domain.VendorUser", "VendorUserPermissionID");
                });
#pragma warning restore 612, 618
        }
    }
}
